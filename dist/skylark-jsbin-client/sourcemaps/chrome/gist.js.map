{"version":3,"sources":["chrome/gist.js"],"names":["define","$","processors","panels","jsbin","XMLHttpRequest","XDomainRequest","remove","Gist","id","gist","this","token","code","user","github_token","get","data","each","files","fileName","fileData","ext","split","slice","join","content","setCode","prototype","processorInit","findByExtension","target","panel","named","set","saveDisabled","click","public","html","render","javascript","css","Promise","all","then","Object","keys","forEach","key","extensions","file","state","length","source","getCode","index","binToFile","desc","title","push","description","getURL","ajax","type","url","JSON","stringify","dataType","crossDomain","success","$document","trigger","html_url","error","xhr","status","console","group","log","groupEnd","stack"],"mappings":"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","file":"../../chrome/gist.js","sourcesContent":["define([\r\n  \"skylark-jquery\",\r\n  \"skylark-jsbin-processors\",\r\n  \"skylark-jsbin-coder/editors/panels\",\r\n   \"../jsbin\"\r\n],function ($,processors,panels,jsbin) {\r\n    /*global $:true, jsbin:true, processors:true, $document*/\r\n    'use strict';\r\n\r\n    // Only allow gist import/export if CORS is supported\r\n    var CORS = !!('withCredentials' in new XMLHttpRequest() ||\r\n                  typeof XDomainRequest !== 'undefined');\r\n    if (!CORS) {\r\n      return $(function () {\r\n        $('#export-as-gist').remove();\r\n      });\r\n    }\r\n\r\n    var Gist = function (id) {\r\n      var gist = this,\r\n          token = '';\r\n      gist.code = {};\r\n      if (jsbin.user && jsbin.user.github_token) { // jshint ignore:line\r\n        token = '?access_token=' + jsbin.user.github_token; // jshint ignore:line\r\n      }\r\n      $.get('https://api.github.com/gists/' + id + token, function (data) {\r\n        if (!data) {return;}\r\n        $.each(data.files, function (fileName, fileData) {\r\n          var ext = fileName.split('.').slice(-1).join('');\r\n          gist.code[ext] = fileData.content;\r\n        });\r\n        gist.setCode();\r\n      });\r\n      return this;\r\n    };\r\n\r\n    Gist.prototype.setCode = function () {\r\n      var gist = this;\r\n      $.each(gist.code, function (ext, data) {\r\n        var processorInit = jsbin.processors.findByExtension(ext),\r\n            target = processorInit.target || processorInit.id,\r\n            panel = panels.named[target];\r\n        if (!panel) {return;}\r\n        processors.set(target, processorInit.id);\r\n        jsbin.saveDisabled = true;\r\n        panel.setCode(data);\r\n        jsbin.saveDisabled = false;\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Export as gist\r\n     */\r\n\r\n    $('a.export-as-gist').click(function () {\r\n      var gist = {\r\n        public: true,\r\n        files: {}\r\n      };\r\n\r\n      var panels = {\r\n        html: panels.named.html.render(),\r\n        javascript: panels.named.javascript.render(),\r\n        css: panels.named.css.render()\r\n      };\r\n\r\n      Promise.all(panels).then(function (panels) { // RSVP.hash\r\n        // Build a file name\r\n        Object.keys(panels).forEach(function (key) {\r\n          var ext = processors[key].extensions ? processors[key].extensions[0] : key;\r\n          var file = ['jsbin', (jsbin.state.code || 'untitled'), ext].join('.');\r\n          if (panels[key].length) {\r\n            gist.files[file] = {\r\n              content: panels[key]\r\n            };\r\n          }\r\n        });\r\n\r\n        if (!gist.files.javascript && !gist.files.css) {\r\n          delete gist.files[['jsbin', (jsbin.state.code || 'untitled'), 'html'].join('.')]\r\n        }\r\n\r\n        if (jsbin.state.processors) {\r\n          panels.source = jsbin.state.processors;\r\n          Object.keys(panels.source).forEach(function (key) {\r\n            panels.source[key] = panels.named[key].getCode();\r\n          });\r\n        }\r\n\r\n        var index = binToFile(panels);\r\n\r\n        gist.files['index.html'] = {\r\n          content: index\r\n        };\r\n\r\n        var desc = [];\r\n\r\n        if (jsbin.state.title) {\r\n          desc.push(jsbin.state.title);\r\n        }\r\n\r\n        if (jsbin.state.description) {\r\n          desc.push(jsbin.state.description);\r\n        }\r\n\r\n        desc.push('// source ' + jsbin.getURL());\r\n\r\n        gist.description = desc.join('\\n\\n');\r\n\r\n        var token = '';\r\n        if (jsbin.user && jsbin.user.github_token) { // jshint ignore:line\r\n          token = '?access_token=' + jsbin.user.github_token; // jshint ignore:line\r\n        }\r\n\r\n        $.ajax({\r\n          type: 'POST',\r\n          url: 'https://api.github.com/gists' + token,\r\n          data: JSON.stringify(gist),\r\n          dataType: 'json',\r\n          crossDomain: true,\r\n          success: function (data) {\r\n            jsbin.$document.trigger('tip', {\r\n              type: 'notification',\r\n              content: 'Gist created! <a href=\"' + data.html_url + '\" target=\"_blank\">Open in new tab.</a>' // jshint ignore:line\r\n            });\r\n          },\r\n          error: function (xhr, status, error) {\r\n            jsbin.$document.trigger('tip', {\r\n              type: 'error',\r\n              content: 'There was a problem creating the gist: ' + error\r\n            });\r\n            console.group('gist');\r\n            console.log(gist);\r\n            console.groupEnd('gist');\r\n          }\r\n        });\r\n      }, function (error) {\r\n        console.error(error.stack);\r\n      });\r\n\r\n      // return false becuase there's weird even stuff going on. ask @rem.\r\n      return false;\r\n    });\r\n\r\n    return Gist;\r\n\r\n\r\n});"]}